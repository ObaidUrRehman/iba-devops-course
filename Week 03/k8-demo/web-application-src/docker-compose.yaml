version: '3' # Specifies the version of the Docker Compose file format

services: # Top-level element to define services, which are containers in Docker Compose

  # my-app service is commented out, but here is how it would be defined:
  # my-app: # Defines a service named "my-app"
    # image: ${docker-registry}/my-app:1.0 # Specifies the image to use, pulling from a custom docker registry
    # ports: # Ports mapping
     # - 3000:3000 # Maps port 3000 of the container to port 3000 on the host

  mongodb: # Defines a service named "mongodb"
    image: mongo # Specifies the Docker image to use for the MongoDB container
    ports:
     - 27017:27017 # Maps port 27017 of the container to port 27017 on the host, the default MongoDB port
    environment: # Environment variables to configure MongoDB
     - MONGO_INITDB_ROOT_USERNAME=admin # MongoDB root username
     - MONGO_INITDB_ROOT_PASSWORD=password # MongoDB root password
    volumes: # Mounts a volume
     - mongo-data:/data/db # Mounts the named volume 'mongo-data' to '/data/db' inside the container for data persistence

  mongo-express: # Defines a service named "mongo-express"
    image: mongo-express # Specifies the image to use for Mongo Express, a web-based MongoDB admin interface
    ports:
     - 8080:8081 # Maps port 8080 on the host to port 8081 on the container (Mongo Express default port)
    environment: # Environment variables to configure Mongo Express
     - ME_CONFIG_MONGODB_ADMINUSERNAME=admin # Mongo Express admin username (should match MongoDB admin username)
     - ME_CONFIG_MONGODB_ADMINPASSWORD=password # Mongo Express admin password (should match MongoDB admin password)
     - ME_CONFIG_MONGODB_SERVER=mongodb # Tells Mongo Express to connect to the MongoDB server using the service name 'mongodb'

volumes: # Top-level element to define named volumes
  mongo-data: # Defines a named volume 'mongo-data' to persist MongoDB data
    driver: local # Specifies that the local volume driver should be used
